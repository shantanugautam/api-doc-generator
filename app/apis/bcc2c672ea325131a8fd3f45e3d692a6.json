{"package":["v1"],"name":"v1","description":"# Authentication and Resource access \r\n>Version: v1 \"Mutatio\"\r\n>\r\n>Authentication Protocol: [_OAuth Version 1.0 Revision A_](http:\/\/oauthbible.com\/#oauth-10a-two-legged)\r\n\r\n* * * *\r\n\r\n>Note: To cater to the diverse businesses that we partner with and their groundbreaking products, we implemented the two-legged OAuth pattern with the _username_ and _password_ as additional arguments. This allows us to be more ambiguous and flexible to whatever platform, language, technology and\/or interface.\r\n\r\n* * * *\r\n* * * *\r\n\r\n## Requesting for an OAuth Request Token\r\n\r\n_\"How can I Login?\"_\r\n\r\n>In order to start using the resources, you need to login to an user that will be the host or subject of the transactions. This is done everytime the application is requesting rights from the user to access his\/her account.\r\n\r\n### Resource\r\n\r\n    https:\/\/api.mmvpay.com\/sg\/v1\/oauth\/request\/token\r\n\r\n### Steps\r\n\r\n#### 1. Gather _parameters_\r\n>Provide values for the following:\r\n>\r\n>| Name |      | Description |\r\n>| :--- | ---- | :---------- |\r\n>| `oauth_consumer_key` | | Also referred to as *API* Key which identifies the application account that is used to connect to the API system. |\r\n>| `oauth_nonce` | | Any random *alphanumeric* value that identifies the transaction being requested. This must be unique within _five (5) minutes_. |\r\n>| `oauth_signature_method` | | Method used to create the signature of the request in _[Step 3d]_. Currently, we only support [HMAC-SHA1](http:\/\/en.wikipedia.org\/wiki\/Hash-based_message_authentication_code). |\r\n>| `oauth_timestamp` | | Time when the request is being call in [Unix Timestamp Format](http:\/\/www.unixtimestamp.com\/index.php). |\r\n>| `oauth_version` | | Version of OAuth you are connecting to. Currenly, we only support [1.0](http:\/\/oauth.net\/core\/1.0\/) |\r\n\r\n#### 2. Sort _parameters_\r\n>Arrange the parameters from _[Step 1]_ in ascending order according to their keys.\r\n\r\n#### 3. Generate _payload signature_\r\n>a. Encode the `method`, `url` and the `query` parameters using [RFC-3986](www.rfc-base.org\/rfc-3986.html). \r\n>\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>|`method`| | UPPERCASED [http methods](http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec9.html) used in connecting to the server. _Supported method: POST_ |\r\n>>|`url`   | | Resource to connect to. In this case, `https:\/\/api.mmvpay.com\/sg\/v1\/oauth\/request\/token`. |\r\n>>|`query` | | The _parameters_ from _[Step 2]_. |\r\n>\r\n>b. Combine the `method`, `url` and the `query` using _&_ from _[Step 3a]_.\r\n>> We will refer to the result as _\"payload\"_.\r\n>\r\n>c. Encode the _API Secret_ using [RFC-3986](www.rfc-base.org\/rfc-3986.html).\r\n>> The result will be called _\"secret\"_.\r\n>\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>| API Secret | | also referred to as _OAuth Secret Key_. The secret string paired to your API key. |\r\n>\r\n>d. Encrypt _payload_ from _[Step 3b]_ with key _secret_ in _[Step 3c]_ using the specified encryption method in _[Step 1]_. \r\n \r\n#### 4. Encrypt the user's _username_\r\n>a. Append the _API Secret_ from _[Step 3]_ to the URI encoded _signature_.\r\n>\r\n>b. Hash the result from _[Step 4a]_ using [MD5](http:\/\/en.wikipedia.org\/wiki\/MD5)\r\n>\r\n>c. Encrypt the `username` using [AES 256](http:\/\/en.wikipedia.org\/wiki\/Advanced_Encryption_Standard), mode **CBC**, Padding **PKCS7** with the **MD5** in _[Step 4b]_ as the **encryption key**\r\n \r\n#### 5. Encrypt the user's _password_\r\n>Following the same process in *[Step 4]*, but encrypt the `password` instead.\r\n    \r\n#### 6. Combine the _signature_, _ecrypted username_ and the _ecrypted password_ to the rest of the _parameters_.\r\n>In additions to the _parameters_ in _[Step 1]_, add the following:\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>| `oauth_signature`     | | Payload signature. Result of _[Step 3]_ |\r\n>>| `oauth_user_name`     | | Encrypted username. Result of _[Step 4]_ |\r\n>>| `oauth_user_password` | | Encrypted password. Result of _[Step 5]_ |\r\n \r\n#### 7. Send the `parameters` to the `host` using the `method` specified in _[Step 3]_.\r\n>If done properly, this will result to a JSON containing the following. Errors will be sent the as an _HTTP error status_.\r\n>\r\n>>| Name | Type |    | Description |\r\n>>| :--- | :--- | -- | :---------- |\r\n>>| `oauth_token`         | `String` | | _Request token_ associated to the _API Key_ which is unique to the source |\r\n>>| `oauth_token_secret`  | `String` | | Secret string associated to the `oauth_token` |\r\n\r\n* * * *\r\n\r\n## Requesting for an OAuth Access Token\r\n_\"Now that I am logged in, can I now access the resources?\"_\r\n\r\n>Well, not yet. Now that the user granted the permission, it would still be tidious and risky to use the user's credentials all the time. To deal with this, we need to request for an access token that we can use evertime we ask for resources.\r\n>\r\n>Most of the steps involved in this process is very similar to **\"Requesting for an OAuth Request Token\"**.\r\n\r\n### Resource\r\n\r\n    https:\/\/api.mmvpay.com\/sg\/v1\/oauth\/access\/token\r\n\r\n### Steps\r\n\r\n#### 1. Gather _parameters_\r\n>This is the same as *[Step 1]* in **\"Requesting for an OAuth Request Token\"**, and add the following: \r\n>\r\n>| Name |      | Description |\r\n>| :--- | ---- | :---------- |\r\n>| `oauth_token` | | This is the *oauth_token* from _[Step 7]_ of **\"Requesting for an OAuth Request Token\"** |\r\n\r\n#### 2. Sort _parameters_\r\n>Arrange the parameters from _[Step 1]_ in ascending order according to their keys.\r\n\r\n#### 3. Generate _payload signature_\r\n>a. Encode the `method`, `url` and the `query` parameters using [RFC-3986](www.rfc-base.org\/rfc-3986.html). \r\n>\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>|`method`| | UPPERCASED [http methods](http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec9.html) used in connecting to the server. _Supported method: POST_ |\r\n>>|`url`   | | Resource to connect to. In this case, `https:\/\/api.mmvpay.com\/sg\/v1\/oauth\/access\/token`. |\r\n>>|`query` | | The _parameters_ from _[Step 2]_. |\r\n>\r\n>b. Combine the `method`, `url` and the `query` using _&_ from _[Step 3a]_.\r\n>> We will refer to the result as _\"payload\"_.\r\n>\r\n>c. Encode the _API Secret_ and the _OAuth Request Secret Token_ from _[Step 7]_ of **\"Requesting for an OAuth Request Token\"** using [RFC-3986](www.rfc-base.org\/rfc-3986.html).\r\n>> The result will be called _\"secret\"_.\r\n>\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>| API Secret | | also referred to as _OAuth Secret Key_. The secret string paired to your API key. |\r\n>>| OAuth Request Secret Token | | `oauth_token_secret` acquired from _[Step 7]_ **\"Requesting for an OAuth Request Token\"** |\r\n>\r\n>d. Concatinate _API Secret_ and the _OAuth Request Secret Token_ from *[Step 3c]* with `&`\r\n>\r\n>>This will be the _\"secret\"_ in _[Step 3e]_.\r\n>\r\n>e. Encrypt _payload_ from _[Step 3b]_ with _secret_ as the key in _[Step 3c]_ using the specified encryption method in _[Step 1]_. \r\n\r\n#### 4. Combine the _signature_ to the rest of the _parameters_.\r\n>In additions to the _parameters_ in _[Step 1]_, add the following:\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>| `oauth_signature`     | | Payload signature. Result of _[Step 3]_ |\r\n \r\n#### 5. Send the `parameters` to the `host` using the `method` specified in _[Step 3]_.\r\n>If done properly, this will result to a JSON containing the following. Errors will be sent the as an _HTTP error status_.\r\n>\r\n>>| Name | Type |    | Description |\r\n>>| :--- | :--- | -- | :---------- |\r\n>>| `oauth_token`         | `String` | | _Access token_ associated to the _API Key_ which is unique to the source |\r\n>>| `oauth_token_secret`  | `String` | | Secret string associated to the `oauth_token` |\r\n    \r\n## Consuming the Resources\r\n_\"Can I now use the resources?\"_\r\n\r\n>Yes! Now that the system recognizes the application and the user, resources can now be used at your will. To do this, we need to cover the basics.\r\n\r\n* * * *\r\n\r\n>The resources or **APIs** is using [ReST](http:\/\/en.wikipedia.org\/wiki\/Representational_state_transfer) or [Representational State Transfer](architecture]http:\/\/www.restapitutorial.com\/lessons\/whatisrest.html) and delivered in [JSON format](http:\/\/en.wikipedia.org\/wiki\/JSON). A resource is an entity normally tied up to on URI of a specific set of information, like _USERS_, _CARDS_ and _TRANSACTIONS_. We can perform [methods](http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec9.html) to manipulate these information.\r\n\r\n* * * *\r\n\r\n>Note: These authorisation is only exclusive to the server, equipment or source the OAuth APIs. Ignoring this will cause a `403` HTTP status error.\r\n* * * *\r\n>Hint: If you can't avoid using multiple servers, equipments or sources, you can use a VPN to connect to the API server.\r\n\r\n### Resource URI Format\r\n\r\n    https:\/\/api.mmvpay.com\/[product]\/[version]\/[resource]\r\n\r\n>| Name | Required |      | Description |\r\n>| :--- | :------- | ---- | :---------- |\r\n>| `product`  | `yes`| | Product configuration code |\r\n>| `version`  | `yes`| | Resource version set . _ex. v1, v2, v3_ |\r\n>| `resource` | `yes`| | Name of resource to consume. _ex. users, users\/wallets_ |\r\n\r\n#### Example:\r\n\r\n~~~\r\nhttps:\/\/api.mmvpay.com\/sg\/v1\/users\r\n~~~\r\n\r\n~~~\r\nhttps:\/\/api.mmvpay.com\/sg\/v1\/users\/wallets\r\n~~~\r\n\r\nAccess the active user's card with id [`bdb957f9671d303a3a1dd5fa8c4994e8`]\r\n~~~\r\nhttps:\/\/api.mmvpay.com\/sg\/v1\/users\/wallets\/cards\/bdb957f9671d303a3a1dd5fa8c4994e8\r\n~~~\r\n\r\n### HTTP Methods\r\n\r\n>| Name |      | Description |\r\n>| :--- | ---- | :---------- |\r\n>| `POST` | | _Creates_ a resource. Information for the resource can be sent using the query body. |\r\n>| `PUT` | | _Updates_\/_Modifies_ a resource. Information for the resource can be sent using the query body. |\r\n>| `GET` | | Reads\/Retrieves a resource. Information for filtering the resource can be sent using the query URI. |\r\n>| `DELETE` | | Delete\/Removes a resource. The item being removed is idenfied depends the URI. |\r\n    \r\n### Steps\r\n\r\n#### 1. Gather _parameters_\r\n>This is the same as *[Step 1]* in **\"Requesting for an OAuth Access Token\"**, and add the following: \r\n>\r\n>| Name |      | Description |\r\n>| :--- | ---- | :---------- |\r\n>| `oauth_token` | | This is the *oauth_token* from _[Step 7]_ of **\"Requesting for an OAuth Access Token\"** |\r\n\r\n#### 2. Sort _parameters_\r\n>Arrange the parameters from _[Step 1]_ in ascending order according to their keys.\r\n\r\n#### 3. Generate _payload signature_\r\n>a. Encode the `method`, `url` and the `query` parameters using [RFC-3986](www.rfc-base.org\/rfc-3986.html). \r\n>\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>|`method`| | UPPERCASED [http methods](http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec9.html) used in connecting to the server|\r\n>>|`url`   | | Resource to connect to. In this case, `https:\/\/api.mmvpay.com\/sg\/v1\/oauth\/request\/token`. |\r\n>>|`query` | | The _parameters_ from _[Step 2]_. |\r\n>\r\n>b. Combine the `method`, `url` and the `query` using _&_ from _[Step 3a]_.\r\n>> We will refer to the result as _\"payload\"_.\r\n>\r\n>c. Encode the _API Secret_ and the _OAuth Access Secret Token_ from _[Step 7]_ of **\"Requesting for an OAuth Access Token\"** using [RFC-3986](www.rfc-base.org\/rfc-3986.html).\r\n>> The result will be called _\"secret\"_.\r\n>\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>| API Secret | | also referred to as _OAuth Secret Key_. The secret string paired to your API key. |\r\n>>| OAuth Access Secret Token | | `oauth_token_secret` acquired from _[Step 7]_ **\"Requesting for an OAuth Access Token\"** |\r\n>\r\n>d. Concatinate _API Secret_ and the _OAuth Request Secret Token_ from *[Step 3c]* with `&`\r\n>\r\n>>This will be the _\"secret\"_ ins _[Step 3e]_.\r\n>\r\n>e. Encrypt _payload_ from _[Step 3b]_ with _secret_ as the key in _[Step 3c]_ using the specified encryption method in _[Step 1]_. \r\n    \r\n#### 4. Combine the _signature_ to the rest of the _parameters_.\r\n>In additions to the _parameters_ in _[Step 1]_, add the following:\r\n>>| Name |      | Description |\r\n>>| :--- | ---- | :---------- |\r\n>>| `oauth_signature`     | | Payload signature. Result of _[Step 3]_ |\r\n \r\n#### 5. Send the `parameters` to the `host` using the `method` specified in _[Step 3]_.\r\n>If done properly, this will result to a JSON containing the following. Errors will be sent the as an _HTTP error status_.\r\n\r\n* * * *\r\n\r\n[End of document version 0.9.0]"}